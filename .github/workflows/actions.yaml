name: CI/CD Odoo

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build_image:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Odoo image and push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./odoo
          tags: |
            febryandana/odoo:16
            febryandana/odoo:latest
          push: ${{ github.ref == 'refs/heads/main' }}

      # - name: Build Postgresql image and push to Docker Hub
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./odoo
      #     tags: |
      #       febryandana/postgresql:15.1
      #       febryandana/postgresql:latest
      #     push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  scan_image:
    name: Scan image vulnerability
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      - name: Scan Odoo image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'febryandana/odoo:16'
          format: 'table'
          exit-code: '0'
          severity: 'MEDIUM,HIGH,CRITICAL'
          
      # - name: Run Trivy vulnerability scanner for Postgresql
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'febryandana/postgresql:15.1'
      #     format: 'table'
      #     exit-code: '0'
      #     severity: 'MEDIUM,HIGH,CRITICAL'
  
  # deploy_argo:
  #   name: Deploy apps to ArgoCD
  #   runs-on: self-hosted
  #   needs: [build_image, scan_image]
  #   steps:
  #     - name: ArgoCD Deploy to Staging
  #       run: |
  #         argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_CREDS_USR }} --password  ${{ secrets.ARGOCD_CREDS_PSW}}
  #         argocd app create odoo --project default --repo https://github.com/febryandana/learn-github-actions1.git --path ./manifests --dest-namespace odoo --dest-server https://kubernetes.default.svc --upsert
  #         argocd --grpc-web app sync odoo --force
  #         argocd --grpc-web app wait odoo --timeout 600